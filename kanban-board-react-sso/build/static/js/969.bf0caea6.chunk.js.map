{"version":3,"file":"static/js/969.bf0caea6.chunk.js","mappings":"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","sources":["components/CustomBreadcrumbs.jsx","components/CustomButton.jsx","services/taskListService.jsx","components/CustomModal.jsx","pages/taskList/index.jsx"],"sourcesContent":["import React from 'react';\nimport { Breadcrumbs, Link, Typography } from '@mui/material';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { ChevronRight } from '@mui/icons-material';\n\nconst CustomBreadcrumbs = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  const pathSegments = location.pathname.split('/').filter(Boolean);\n  \n  const isId = (segment) => {\n    return /\\d/.test(segment) || segment.length > 20;\n  };\n\n  const formatSegment = (segment) => {\n    return segment\n      .split(/[-_]/)\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const breadcrumbItems = pathSegments.reduce((items, segment, index) => {\n    if (isId(segment)) return items;\n    const path = `/${pathSegments.slice(0, index + 1).join('/')}`;\n    \n    items.push({\n      label: formatSegment(segment),\n      path\n    });\n\n    return items;\n  }, []);\n\n  return (\n    <Breadcrumbs \n      separator={<ChevronRight sx={{ fontSize: 18 }} />} \n      aria-label=\"breadcrumb\" \n      sx={{ mb: 3 }}\n    >\n      <Link\n        color=\"inherit\"\n        onClick={() => navigate('/')}\n        sx={{ \n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          '&:hover': {\n            textDecoration: 'none',\n            color: 'primary.main'\n          }\n        }}\n      >\n        Dashboard\n      </Link>\n      \n      {breadcrumbItems.map((item, index) => {\n        const isLast = index === breadcrumbItems.length - 1;\n\n        return isLast ? (\n          <Typography \n            key={item.path} \n            color=\"text.primary\"\n            sx={{ display: 'flex', alignItems: 'center' }}\n          >\n            {item.label}\n          </Typography>\n        ) : (\n          <Link\n            key={item.path}\n            color=\"inherit\"\n            onClick={() => navigate(item.path)}\n            sx={{ \n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              '&:hover': {\n                textDecoration: 'none',\n                color: 'primary.main'\n              }\n            }}\n          >\n            {item.label}\n          </Link>\n        );\n      })}\n    </Breadcrumbs>\n  );\n};\n\nexport default CustomBreadcrumbs;\n","// CustomButton.js\nimport React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useTheme } from \"@mui/material/styles\";\n\n//code accepted\n\nconst CustomButton = ({ label, onClick, startIcon, variant = \"contained\", color = \"primary\", sx, ...props }) => {\n  const theme = useTheme();\n\n  return (\n    <Button\n      variant={variant}\n      startIcon={startIcon || null}\n      onClick={onClick}\n      sx={{\n        mt: 2,\n        mb: 4,\n        width: \"170px\",\n        fontSize: \"12px\",\n        color: variant === \"contained\" ? \"white\" : theme.palette[color].main,\n        backgroundColor: variant === \"contained\" ? theme.palette[color].main : \"transparent\",\n        borderColor: variant === \"outlined\" ? theme.palette[color].main : \"transparent\",\n        \"&:hover\": {\n          backgroundColor: variant === \"contained\" ? theme.palette[color].dark : \"transparent\",\n          borderColor: variant === \"outlined\" ? theme.palette[color].dark : \"transparent\",\n        },\n        ...sx,\n      }}\n      {...props}\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default CustomButton;\n","import axiosConfig from \"./axiosConfig\";\n\nexport const taskListService = {\n  getAlltasks: (id) => {\n    return axiosConfig.get(`/tasks/${id}`);\n  },\n\n  taskBulkUpdateDragAndDrop: (payload, id) => {\n    return axiosConfig.put(`/tasks/bulk-update/${id}`, payload);\n  },\n\n  createTask: (payload, id) => {\n    return axiosConfig.post(`/tasks/${id}`, payload);\n  },\n  deleteTask: (id, column, projectId) => {\n    return axiosConfig.delete(`/tasks/${projectId}/${id}/${column}`);\n  },\n\n  updateTask: (id, column, payload, projectId) => {\n    return axiosConfig.put(`/tasks/${projectId}/${id}/${column}`, payload);\n  },\n};\n","import React from 'react';\nimport { Modal, Box, Typography } from '@mui/material';\n\nconst modalStyle = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: { xs: '90%', sm: 400 },\n  bgcolor: \"background.paper\",\n  borderRadius: 2,\n  boxShadow: 24,\n  p: 4,\n};\n\nconst CustomModal = ({\n  open,\n  onClose,\n  title,\n  children,\n  maxWidth,\n  ...props\n}) => {\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"modal-title\"\n      {...props}\n    >\n      <Box sx={{ ...modalStyle, width: maxWidth || modalStyle.width }}>\n        {title && (\n          <Typography \n            id=\"modal-title\" \n            variant=\"h6\" \n            component=\"h2\" \n            sx={{ mb: 3 }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Box>\n    </Modal>\n  );\n};\n\nexport default CustomModal;","import React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"@hello-pangea/dnd\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  IconButton,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Breadcrumbs,\n  Link,\n  Modal,\n  FormControl,\n  Select,\n  InputLabel,\n} from \"@mui/material\";\nimport {\n  MoreVert,\n  AddCircleOutline as AddIcon,\n  ArrowBack,\n} from \"@mui/icons-material\";\nimport CustomButton from \"../../components/CustomButton\";\nimport { notify } from \"../../utils\";\nimport { taskListService } from \"../../services/taskListService\";\nimport CustomModal from \"../../components/CustomModal\";\nimport CustomBreadcrumbs from \"../../components/CustomBreadcrumbs\";\n\nfunction TaskList() {\n  const params = useParams();\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState({});\n  const [taskData, setTaskData] = useState({\n    _id: \"\",\n    taskSummary: \"\",\n    acceptanceCriteria: \"\",\n    status: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [refresh, setRefresh] = useState(false);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [updateModalOpen, setUpdateModalOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [projectInfo, setProjectInfo] = useState(\"\");\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await taskListService.getAlltasks(params.id);\n        const backData = res.data.data.board;\n        delete backData._id;\n        delete backData.userId;\n        delete backData.__v;\n        setTasks(backData);\n        setProjectInfo(res.data.data.projectInfo);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [refresh, params.id]);\n\n  const onChange = (event) => {\n    setTaskData({\n      ...taskData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Menu handlers\n  const handleMenuClick = (event, task) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedTask(task);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedTask(null);\n  };\n\n  // Modal handlers\n  const handleOpenCreateModal = () => setCreateModalOpen(true);\n  const handleCloseCreateModal = () => {\n    setCreateModalOpen(false);\n    setTaskData({\n      _id: \"\",\n      taskSummary: \"\",\n      acceptanceCriteria: \"\",\n      status: \"\",\n    });\n  };\n\n  const handleOpenUpdateModal = (task) => {\n    setTaskData(task);\n    setUpdateModalOpen(true);\n    handleMenuClose();\n  };\n\n  const handleCloseUpdateModal = () => {\n    setUpdateModalOpen(false);\n    setTaskData({\n      _id: \"\",\n      taskSummary: \"\",\n      acceptanceCriteria: \"\",\n      status: \"\",\n    });\n  };\n\n  const onSubmitCreateTask = async (event) => {\n    event.preventDefault();\n    setError(\"\");\n\n    if (!taskData.taskSummary) {\n      notify.error(\"Task Summary is a required field\");\n      return;\n    }\n\n    let status = taskData.status || \"todo\";\n\n    try {\n      setLoading(true);\n      delete taskData._id;\n      await taskListService.createTask({ ...taskData, status }, params.id);\n      notify.success(\"New task created\");\n      setRefresh(!refresh);\n      handleCloseCreateModal();\n    } catch (error) {\n      notify.error(error.response?.data?.message || \"Unable to create task\");\n      setError(error.response?.data?.message || \"Unable to create task\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onUpdateSubmit = async (event) => {\n    event.preventDefault();\n    setError(\"\");\n\n    if (!taskData.taskSummary) {\n      notify.error(\"Task Summary is a required field\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await taskListService.updateTask(\n        taskData._id,\n        taskData.status,\n        taskData,\n        params.id\n      );\n      notify.success(\"Task Updated\");\n      setRefresh(!refresh);\n      handleCloseUpdateModal();\n    } catch (error) {\n      notify.error(error.response?.data?.message || \"Unable to update task\");\n      setError(error.response?.data?.message || \"Unable to update task\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteClick = () => {\n    setDeleteDialogOpen(true);\n  };\n\n  const handleDeleteConfirm = async () => {\n    try {\n      await taskListService.deleteTask(\n        selectedTask._id,\n        selectedTask.status,\n        params.id\n      );\n      setRefresh(!refresh);\n      setDeleteDialogOpen(false);\n    } catch (error) {\n      console.log(error);\n\n      notify.error(\"Unable to delete the task at this time\");\n    } finally {\n      handleMenuClose();\n    }\n  };\n\n  const handleOnDragEnd = async (result) => {\n    if (!result.destination) return;\n\n    const { source, destination } = result;\n    const taskData = { ...tasks };\n\n    if (source.droppableId === destination.droppableId) {\n      const task = taskData[source.droppableId];\n      const items = Array.from(task.tasks);\n      const [reOrderItem] = items.splice(source.index, 1);\n      items.splice(destination.index, 0, reOrderItem);\n      taskData[source.droppableId] = {\n        ...task,\n        tasks: items,\n      };\n    } else {\n      const sourceTask = taskData[source.droppableId];\n      const desTask = taskData[destination.droppableId];\n      const sourceItems = Array.from(sourceTask.tasks);\n      const desItems = Array.from(desTask.tasks);\n      const [movedItem] = sourceItems.splice(source.index, 1);\n      desItems.splice(destination.index, 0, movedItem);\n      taskData[source.droppableId] = {\n        ...sourceTask,\n        tasks: sourceItems,\n      };\n      taskData[destination.droppableId] = {\n        ...desTask,\n        tasks: desItems,\n      };\n    }\n\n    setTasks(taskData);\n\n    try {\n      await taskListService.taskBulkUpdateDragAndDrop(\n        {\n          sourceColumn: source.droppableId,\n          destColumn: destination.droppableId,\n          sourceIndex: source.index,\n          destIndex: destination.index,\n        },\n        params.id\n      );\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Box sx={{ padding: \"37px\" }}>\n      {/* Header Section */}\n      <CustomBreadcrumbs />\n      <Box\n        sx={{\n          backgroundColor: \"white\",\n          p: 3,\n          borderRadius: 2,\n          boxShadow: \"0 2px 4px rgba(0,0,0,0.05)\",\n          mb: 3,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: { xs: \"column\", md: \"row\" },\n            alignItems: { xs: \"flex-start\", md: \"center\" },\n            justifyContent: \"space-between\",\n            gap: 2,\n          }}\n        >\n          <Box>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                fontWeight: 600,\n                color: \"text.primary\",\n                mb: 0.5,\n              }}\n            >\n              {projectInfo.projectName}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">\n              {projectInfo.projectDescription}\n            </Typography>\n          </Box>\n\n          <Box\n            sx={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              gap: 3,\n            }}\n          >\n            <Box>\n              <Typography variant=\"h6\" color=\"primary\">\n                {tasks?.todo?.tasks?.length ?? 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                To Do\n              </Typography>\n            </Box>\n\n            <Box>\n              <Typography variant=\"h6\" color=\"warning.main\">\n                {tasks?.inProgress?.tasks?.length ?? 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                In Progress\n              </Typography>\n            </Box>\n\n            <Box>\n              <Typography variant=\"h6\" color=\"success.main\">\n                {tasks?.done?.tasks?.length ?? 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Completed\n              </Typography>\n            </Box>\n\n            <Box>\n              <Typography variant=\"h6\">\n                {Object.values(tasks).reduce(\n                  (acc, curr) => acc + curr.tasks.length,\n                  0\n                )}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Tasks\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Action Bar */}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: { xs: \"column\", sm: \"row\" },\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          mb: 4,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: { xs: \"column\", sm: \"row\" },\n            alignItems: \"center\",\n            width: { xs: \"100%\", sm: \"auto\" },\n          }}\n        >\n          <TextField\n            variant=\"outlined\"\n            placeholder=\"Search tasks...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            sx={{\n              mr: { sm: 2 },\n              mb: { xs: 2, sm: 0 },\n              width: { xs: \"100%\", sm: \"auto\" },\n            }}\n          />\n          <CustomButton\n            label=\"Create Task\"\n            onClick={handleOpenCreateModal}\n            startIcon={<AddIcon />}\n            sx={{\n              width: { xs: \"100%\", sm: \"auto\" },\n              mb: { xs: 2, sm: 0 },\n            }}\n          />\n        </Box>\n        <CustomButton\n          label=\"Go Back\"\n          onClick={() => navigate(\"/projects\")}\n          startIcon={<ArrowBack />}\n          variant=\"outlined\"\n          sx={{\n            width: { xs: \"100%\", sm: \"auto\" },\n          }}\n        />\n      </Box>\n\n      {/* Task Board */}\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <Box\n          sx={{\n            display: \"grid\",\n            gridTemplateColumns: {\n              xs: \"1fr\",\n              sm: \"repeat(3, 1fr)\",\n            },\n            gap: 2,\n            width: \"100%\",\n          }}\n        >\n          {Object.entries(tasks).map(([taskId, task]) => (\n            <Box key={taskId}>\n              <Card\n                sx={{\n                  backgroundColor: \"#f0efed\",\n                  boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\n                  height: \"100%\",\n                }}\n              >\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom sx={{ mb: 2 }}>\n                    {task.title} ({task.tasks.length})\n                  </Typography>\n                  <Droppable droppableId={taskId}>\n                    {(provided) => (\n                      <Box\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        sx={{ minHeight: 100 }}\n                      >\n                        {task.tasks.map((t, index) => (\n                          <Draggable\n                            key={t._id}\n                            draggableId={t._id}\n                            index={index}\n                          >\n                            {(provided) => (\n                              <Card\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                sx={{\n                                  mb: 2,\n                                  backgroundColor: \"white\",\n                                  \"&:hover\": {\n                                    boxShadow: \"0 2px 4px rgba(0,0,0,0.15)\",\n                                  },\n                                }}\n                              >\n                                <CardContent>\n                                  <Box\n                                    sx={{\n                                      display: \"flex\",\n                                      alignItems: \"center\",\n                                    }}\n                                  >\n                                    <Box sx={{ flexGrow: 1 }}>\n                                      <Typography\n                                        variant=\"body2\"\n                                        color=\"text.secondary\"\n                                      >\n                                        Task ID: {t._id}\n                                      </Typography>\n                                      <Typography\n                                        variant=\"subtitle1\"\n                                        sx={{ mt: 1 }}\n                                      >\n                                        {t.taskSummary}\n                                      </Typography>\n                                    </Box>\n                                    <IconButton\n                                      onClick={(e) => handleMenuClick(e, t)}\n                                      size=\"small\"\n                                    >\n                                      <MoreVert />\n                                    </IconButton>\n                                  </Box>\n                                </CardContent>\n                              </Card>\n                            )}\n                          </Draggable>\n                        ))}\n                        {provided.placeholder}\n                      </Box>\n                    )}\n                  </Droppable>\n                </CardContent>\n              </Card>\n            </Box>\n          ))}\n        </Box>\n      </DragDropContext>\n\n      {/* Create Task Modal */}\n\n      <CustomModal\n        open={createModalOpen}\n        onClose={handleCloseCreateModal}\n        title=\"Create New Task\"\n      >\n        <form onSubmit={onSubmitCreateTask}>\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Task Summary\"\n            name=\"taskSummary\"\n            value={taskData.taskSummary}\n            onChange={onChange}\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            label=\"Acceptance Criteria\"\n            name=\"acceptanceCriteria\"\n            value={taskData.acceptanceCriteria}\n            onChange={onChange}\n            multiline\n            rows={4}\n            sx={{ mb: 2 }}\n          />\n          <FormControl fullWidth sx={{ mb: 3 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              name=\"status\"\n              value={taskData.status}\n              label=\"Status\"\n              onChange={onChange}\n            >\n              <MenuItem value=\"todo\">To Do</MenuItem>\n              <MenuItem value=\"inProgress\">In Progress</MenuItem>\n              <MenuItem value=\"done\">Done</MenuItem>\n            </Select>\n          </FormControl>\n          <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 2 }}>\n            <CustomButton\n              label=\"Cancel\"\n              onClick={handleCloseCreateModal}\n              variant=\"outlined\"\n            />\n            <CustomButton label=\"Create Task\" type=\"submit\" loading={loading} />\n          </Box>\n        </form>\n      </CustomModal>\n\n      {/* Update Task Modal */}\n      <CustomModal\n        open={updateModalOpen}\n        onClose={handleCloseUpdateModal}\n        title=\"Update Task\"\n      >\n        <form onSubmit={onUpdateSubmit}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            label=\"Task ID\"\n            value={taskData._id || \"\"}\n            disabled\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Task Summary\"\n            name=\"taskSummary\"\n            value={taskData.taskSummary || \"\"}\n            onChange={onChange}\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            label=\"Acceptance Criteria\"\n            name=\"acceptanceCriteria\"\n            value={taskData.acceptanceCriteria || \"\"}\n            onChange={onChange}\n            multiline\n            rows={4}\n            sx={{ mb: 2 }}\n          />\n          <FormControl fullWidth sx={{ mb: 3 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              name=\"status\"\n              value={taskData.status || \"\"}\n              label=\"Status\"\n              onChange={onChange}\n            >\n              <MenuItem value=\"todo\">To Do</MenuItem>\n              <MenuItem value=\"inProgress\">In Progress</MenuItem>\n              <MenuItem value=\"done\">Done</MenuItem>\n            </Select>\n          </FormControl>\n          <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 2 }}>\n            <CustomButton\n              label=\"Cancel\"\n              onClick={handleCloseUpdateModal}\n              variant=\"outlined\"\n            />\n            <CustomButton label=\"Update Task\" type=\"submit\" loading={loading} />\n          </Box>\n        </form>\n      </CustomModal>\n\n      {/* Task Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n      >\n        <MenuItem onClick={() => handleOpenUpdateModal(selectedTask)}>\n          View/Update\n        </MenuItem>\n        <MenuItem onClick={handleDeleteClick} sx={{ color: \"error.main\" }}>\n          Delete\n        </MenuItem>\n      </Menu>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialogOpen}\n        onClose={() => setDeleteDialogOpen(false)}\n        PaperProps={{\n          sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            borderRadius: 2,\n          },\n        }}\n      >\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            You are deleting the task \"{selectedTask?.taskSummary}\". This action\n            cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: 2.5 }}>\n          <CustomButton\n            label=\"Cancel\"\n            onClick={() => setDeleteDialogOpen(false)}\n            variant=\"outlined\"\n          />\n          <CustomButton\n            label=\"Delete\"\n            onClick={handleDeleteConfirm}\n            color=\"error\"\n          />\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}\n\nexport default TaskList;\n"],"names":["CustomBreadcrumbs","location","useLocation","navigate","useNavigate","pathSegments","pathname","split","filter","Boolean","formatSegment","segment","map","word","charAt","toUpperCase","slice","join","breadcrumbItems","reduce","items","index","test","length","isId","path","push","label","_jsxs","Breadcrumbs","separator","_jsx","ChevronRight","sx","fontSize","mb","children","Link","color","onClick","cursor","display","alignItems","textDecoration","item","Typography","_ref","startIcon","variant","props","theme","useTheme","Button","mt","width","palette","main","backgroundColor","borderColor","dark","taskListService","id","axiosConfig","get","taskBulkUpdateDragAndDrop","payload","put","createTask","post","deleteTask","column","projectId","delete","updateTask","modalStyle","position","top","left","transform","xs","sm","bgcolor","borderRadius","boxShadow","p","open","onClose","title","maxWidth","Modal","Box","component","_tasks$todo$tasks$len","_tasks$todo","_tasks$todo$tasks","_tasks$inProgress$tas","_tasks$inProgress","_tasks$inProgress$tas2","_tasks$done$tasks$len","_tasks$done","_tasks$done$tasks","params","useParams","tasks","setTasks","useState","taskData","setTaskData","_id","taskSummary","acceptanceCriteria","status","loading","setLoading","error","setError","refresh","setRefresh","createModalOpen","setCreateModalOpen","updateModalOpen","setUpdateModalOpen","deleteDialogOpen","setDeleteDialogOpen","selectedTask","setSelectedTask","anchorEl","setAnchorEl","searchTerm","setSearchTerm","projectInfo","setProjectInfo","useEffect","res","backData","data","board","userId","__v","console","log","onChange","event","target","name","value","handleMenuClose","handleCloseCreateModal","handleCloseUpdateModal","padding","flexDirection","md","justifyContent","gap","fontWeight","projectName","projectDescription","flexWrap","todo","inProgress","done","Object","values","acc","curr","TextField","placeholder","e","mr","CustomButton","handleOpenCreateModal","AddIcon","ArrowBack","DragDropContext","onDragEnd","async","result","destination","source","droppableId","task","Array","from","reOrderItem","splice","sourceTask","desTask","sourceItems","desItems","movedItem","sourceColumn","destColumn","sourceIndex","destIndex","gridTemplateColumns","entries","taskId","Card","height","CardContent","gutterBottom","Droppable","provided","ref","innerRef","droppableProps","minHeight","t","Draggable","draggableId","draggableProps","dragHandleProps","flexGrow","IconButton","handleMenuClick","currentTarget","size","MoreVert","CustomModal","onSubmit","preventDefault","notify","success","_error$response","_error$response$data","_error$response2","_error$response2$data","response","message","margin","required","fullWidth","multiline","rows","FormControl","InputLabel","Select","MenuItem","type","_error$response3","_error$response3$data","_error$response4","_error$response4$data","disabled","Menu","anchorOrigin","vertical","horizontal","transformOrigin","handleDeleteClick","Dialog","PaperProps","DialogTitle","DialogContent","DialogActions"],"sourceRoot":""}