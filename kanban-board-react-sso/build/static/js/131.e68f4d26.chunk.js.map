{"version":3,"file":"static/js/131.e68f4d26.chunk.js","mappings":"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","sources":["components/CustomBreadcrumbs.jsx","components/CustomButton.jsx","pages/projects/components/projectTable.jsx","pages/projects/components/projectForm.jsx","pages/projects/projectDashboard.jsx"],"sourcesContent":["import React from 'react';\nimport { Breadcrumbs, Link, Typography } from '@mui/material';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { ChevronRight } from '@mui/icons-material';\n\nconst CustomBreadcrumbs = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  const pathSegments = location.pathname.split('/').filter(Boolean);\n  \n  const isId = (segment) => {\n    return /\\d/.test(segment) || segment.length > 20;\n  };\n\n  const formatSegment = (segment) => {\n    return segment\n      .split(/[-_]/)\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const breadcrumbItems = pathSegments.reduce((items, segment, index) => {\n    if (isId(segment)) return items;\n    const path = `/${pathSegments.slice(0, index + 1).join('/')}`;\n    \n    items.push({\n      label: formatSegment(segment),\n      path\n    });\n\n    return items;\n  }, []);\n\n  return (\n    <Breadcrumbs \n      separator={<ChevronRight sx={{ fontSize: 18 }} />} \n      aria-label=\"breadcrumb\" \n      sx={{ mb: 3 }}\n    >\n      <Link\n        color=\"inherit\"\n        onClick={() => navigate('/')}\n        sx={{ \n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          '&:hover': {\n            textDecoration: 'none',\n            color: 'primary.main'\n          }\n        }}\n      >\n        Dashboard\n      </Link>\n      \n      {breadcrumbItems.map((item, index) => {\n        const isLast = index === breadcrumbItems.length - 1;\n\n        return isLast ? (\n          <Typography \n            key={item.path} \n            color=\"text.primary\"\n            sx={{ display: 'flex', alignItems: 'center' }}\n          >\n            {item.label}\n          </Typography>\n        ) : (\n          <Link\n            key={item.path}\n            color=\"inherit\"\n            onClick={() => navigate(item.path)}\n            sx={{ \n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              '&:hover': {\n                textDecoration: 'none',\n                color: 'primary.main'\n              }\n            }}\n          >\n            {item.label}\n          </Link>\n        );\n      })}\n    </Breadcrumbs>\n  );\n};\n\nexport default CustomBreadcrumbs;\n","// CustomButton.js\nimport React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useTheme } from \"@mui/material/styles\";\n\n//code accepted\n\nconst CustomButton = ({ label, onClick, startIcon, variant = \"contained\", color = \"primary\", sx, ...props }) => {\n  const theme = useTheme();\n\n  return (\n    <Button\n      variant={variant}\n      startIcon={startIcon || null}\n      onClick={onClick}\n      sx={{\n        mt: 2,\n        mb: 4,\n        width: \"170px\",\n        fontSize: \"12px\",\n        color: variant === \"contained\" ? \"white\" : theme.palette[color].main,\n        backgroundColor: variant === \"contained\" ? theme.palette[color].main : \"transparent\",\n        borderColor: variant === \"outlined\" ? theme.palette[color].main : \"transparent\",\n        \"&:hover\": {\n          backgroundColor: variant === \"contained\" ? theme.palette[color].dark : \"transparent\",\n          borderColor: variant === \"outlined\" ? theme.palette[color].dark : \"transparent\",\n        },\n        ...sx,\n      }}\n      {...props}\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default CustomButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { tableCellClasses } from \"@mui/material/TableCell\";\n\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n  styled,\n  Skeleton,\n  Button,\n} from \"@mui/material\";\nimport { MoreVert as MoreVertIcon } from \"@mui/icons-material\";\nimport { fetchProjects, setSingleProject } from \"../../../store/projectSlice\";\nimport { projectService } from \"../../../services/projectService\";\n\n// Styled components\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.white,\n    fontWeight: 600,\n    color: theme.palette.text.primary,\n    borderBottom: `2px solid ${theme.palette.divider}`, // Slightly thicker bottom border for header\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  \"&:nth-of-type(odd)\": {\n    backgroundColor: theme.palette.action.hover,\n  },\n  \"&:hover\": {\n    backgroundColor: theme.palette.action.selected,\n  },\n  \"&:last-child td, &:last-child th\": {\n    border: 0,\n  },\n}));\n\nfunction ProjectTable({ handleOpenEditModal }) {\n  const { projects, loading } = useSelector((state) => state.project);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // State for menu\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedProject, setSelectedProject] = useState(null);\n\n  // State for delete dialog\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  // Menu handlers\n  const handleMenuOpen = (event, project) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedProject(project);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedProject(null);\n  };\n\n  // Action handlers\n  const handleProjectBoard = () => {\n    if (selectedProject) {\n      navigate(`/projects/${selectedProject._id}/tasklist`);\n    }\n    handleMenuClose();\n  };\n\n  const handleUpdateProject = () => {\n    if (selectedProject) {\n      dispatch(setSingleProject(selectedProject));\n      handleOpenEditModal(true);\n    }\n    handleMenuClose();\n  };\n\n  const handleDeleteClick = () => {\n    setDeleteDialogOpen(true);\n    //\n  };\n\n  const handleDeleteConfirm = async () => {\n    try {\n      console.log(selectedProject);\n\n      await projectService.deleteProject(selectedProject._id);\n      dispatch(fetchProjects());\n      setDeleteDialogOpen(false);\n      handleMenuClose();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      // You might want to show an error message here\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={400} />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <TableContainer component={Paper} elevation={2}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Project Name</StyledTableCell>\n              <StyledTableCell>Core Technology</StyledTableCell>\n              <StyledTableCell>Description</StyledTableCell>\n              <StyledTableCell align=\"right\">Actions</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {projects.map((project) => (\n              <StyledTableRow key={project._id}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {project.projectName}\n                </StyledTableCell>\n                <StyledTableCell>{project.coreTechnology}</StyledTableCell>\n                <StyledTableCell>{project.projectDescription}</StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <IconButton\n                    onClick={(event) => handleMenuOpen(event, project)}\n                    size=\"small\"\n                  >\n                    <MoreVertIcon />\n                  </IconButton>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Action Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n      >\n        <MenuItem onClick={handleProjectBoard}>Project Board</MenuItem>\n        <MenuItem onClick={handleUpdateProject}>Update Project</MenuItem>\n        <MenuItem onClick={handleDeleteClick} sx={{ color: \"error.main\" }}>\n          Delete Project\n        </MenuItem>\n      </Menu>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialogOpen}\n        onClose={() => setDeleteDialogOpen(false)}\n        aria-labelledby=\"delete-dialog-title\"\n        aria-describedby=\"delete-dialog-description\"\n      >\n        <DialogTitle id=\"delete-dialog-title\">Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            You are deleting project \"{selectedProject?.projectName}\" and all\n            associated tasks. This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleDeleteConfirm}\n            color=\"error\"\n            variant=\"contained\"\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}\n\nexport default ProjectTable;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"@mui/material/Modal\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport CustomButton from \"../../../components/CustomButton\";\nimport { notify } from \"../../../utils\";\nimport { projectService } from \"../../../services/projectService\";\nimport { fetchProjects } from \"../../../store/projectSlice\";\n\nconst modalStyle = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"background.paper\",\n  borderRadius: 2,\n  boxShadow: 24,\n  p: 4,\n};\n\nfunction ProjectForm({ open, onClose }) {\n  const { project } = useSelector((state) => state.project);\n  const projectId = project._id;\n  const [projectData, setProjectData] = useState(project);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (project) {\n      setProjectData(project);\n    }\n  }, [project]);\n\n  const { projectName, coreTechnology, projectDescription } = projectData;\n\n  const onChange = (event) => {\n    setProjectData({\n      ...projectData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const onSubmitProject = async (event) => {\n    event.preventDefault();\n    setError(\"\");\n\n    if (!projectName) {\n      notify.error(\"Project Name is a required field\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      let res;\n\n      if (projectId) {\n        res = await projectService.updateProject(projectId, projectData);\n      } else {\n        res = await projectService.createProject(projectData);\n      }\n      dispatch(fetchProjects());\n      notify.success(res.data.message);\n      onClose(); // Close modal after successful submission\n    } catch (error) {\n      notify.error(error.response?.data?.message || \"Unable to create project\");\n      setError(error.response?.data?.message || \"Unable to create project\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"project-modal-title\"\n      aria-describedby=\"project-modal-description\"\n    >\n      <Box sx={modalStyle}>\n        <Typography\n          id=\"project-modal-title\"\n          variant=\"h6\"\n          component=\"h2\"\n          sx={{ mb: 3 }}\n        >\n          {projectId ? \"Edit Project\" : \"Create New Project\"}\n        </Typography>\n\n        <form onSubmit={onSubmitProject}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"projectName\"\n            label=\"Project Name\"\n            name=\"projectName\"\n            value={projectName}\n            onChange={onChange}\n            helperText=\"Required Field\"\n            autoFocus\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"coreTechnology\"\n            label=\"Core Technology\"\n            name=\"coreTechnology\"\n            value={coreTechnology}\n            onChange={onChange}\n            helperText=\"i.e. React, Spring Boot, Java, ExpressJS, etc.\"\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"projectDescription\"\n            label=\"Project Description\"\n            name=\"projectDescription\"\n            value={projectDescription}\n            onChange={onChange}\n            multiline\n            rows={4}\n          />\n\n          {error && (\n            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\n              {error}\n            </Typography>\n          )}\n\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              gap: 2,\n              mt: 3,\n            }}\n          >\n            <CustomButton\n              label=\"Cancel\"\n              onClick={onClose}\n              variant=\"outlined\"\n              sx={{\n                width: \"100px\",\n                fontSize: \"14px\",\n              }}\n            />\n            <CustomButton\n              label=\"Save\"\n              type=\"submit\"\n              disabled={loading}\n              sx={{\n                width: \"100px\",\n                fontSize: \"14px\",\n              }}\n            />\n          </Box>\n        </form>\n      </Box>\n    </Modal>\n  );\n}\n\nexport default ProjectForm;\n","import { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { Box } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport ProjectCard from \"./components/projectTable\";\nimport ProjectForm from \"./components/projectForm\";\nimport { useDispatch } from \"react-redux\";\nimport { clearSingleProject, fetchProjects } from \"../../store/projectSlice\";\nimport CustomButton from \"../../components/CustomButton\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Link from \"@mui/material/Link\";\nimport Typography from \"@mui/material/Typography\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport ProjectTable from \"./components/projectTable\";\nimport CustomBreadcrumbs from \"../../components/CustomBreadcrumbs\";\n\nfunction ProjectDashboard() {\n  const theme = createTheme({\n    typography: {\n      allVariants: {\n        color: \"#555555\",\n      },\n    },\n  });\n\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n    dispatch(clearSingleProject());\n  };\n\n  const handleOpenEditModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  useEffect(() => {\n    dispatch(fetchProjects());\n  }, [dispatch]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box sx={{ flexGrow: 1, minHeight: \"100vh\", margin: 0, padding: 2 }}>\n        <CssBaseline />\n        <Box sx={{ padding: \"20px\", width: \"100%\" }}>\n          <CustomBreadcrumbs />\n        </Box>\n        <Toolbar />\n        <CustomButton\n          label=\"Create Project\"\n          onClick={handleOpenModal}\n          startIcon={<AddIcon />}\n        />\n        <hr />\n        <ProjectForm open={isModalOpen} onClose={handleCloseModal} />{\" \"}\n        {/* { list } */}\n        <ProjectTable handleOpenEditModal={handleOpenEditModal} />\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default ProjectDashboard;\n"],"names":["CustomBreadcrumbs","location","useLocation","navigate","useNavigate","pathSegments","pathname","split","filter","Boolean","formatSegment","segment","map","word","charAt","toUpperCase","slice","join","breadcrumbItems","reduce","items","index","test","length","isId","path","push","label","_jsxs","Breadcrumbs","separator","_jsx","ChevronRight","sx","fontSize","mb","children","Link","color","onClick","cursor","display","alignItems","textDecoration","item","Typography","_ref","startIcon","variant","props","theme","useTheme","Button","mt","width","palette","main","backgroundColor","borderColor","dark","StyledTableCell","styled","TableCell","tableCellClasses","head","common","white","fontWeight","text","primary","borderBottom","divider","body","StyledTableRow","TableRow","_ref2","action","hover","selected","border","_ref3","handleOpenEditModal","projects","loading","useSelector","state","project","dispatch","useDispatch","anchorEl","setAnchorEl","useState","selectedProject","setSelectedProject","deleteDialogOpen","setDeleteDialogOpen","handleMenuClose","Box","p","Skeleton","height","TableContainer","component","Paper","elevation","Table","minWidth","TableHead","align","TableBody","scope","projectName","coreTechnology","projectDescription","IconButton","event","handleMenuOpen","currentTarget","size","MoreVertIcon","_id","Menu","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","handleProjectBoard","handleUpdateProject","setSingleProject","handleDeleteClick","Dialog","DialogTitle","id","DialogContent","DialogActions","async","console","log","projectService","deleteProject","fetchProjects","error","modalStyle","position","top","left","transform","bgcolor","borderRadius","boxShadow","projectId","projectData","setProjectData","setLoading","setError","useEffect","onChange","target","name","value","Modal","onSubmit","preventDefault","res","updateProject","createProject","notify","success","data","message","_error$response","_error$response$data","_error$response2","_error$response2$data","response","TextField","margin","fullWidth","helperText","autoFocus","multiline","rows","justifyContent","gap","CustomButton","type","disabled","createTheme","typography","allVariants","isModalOpen","setIsModalOpen","ThemeProvider","flexGrow","minHeight","padding","CssBaseline","Toolbar","handleOpenModal","clearSingleProject","AddIcon","ProjectForm","handleCloseModal","ProjectTable"],"sourceRoot":""}